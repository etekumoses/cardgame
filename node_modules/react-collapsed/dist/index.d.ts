/**
  * react-collapsed
  *
  * Copyright (c) 2019-2022, Rogin Farrer
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE.md file in the root directory of this source tree.
  *
  * @license MIT
  */

import * as react from 'react';
import { MouseEventHandler } from 'react';

type Style = Partial<CSSStyleDeclaration>;
interface CollapseParams {
    /** If true, the collapse element will initialize expanded */
    defaultExpanded?: boolean;
    /** Height in pixels that the collapse element collapses to */
    collapsedHeight?: number;
    /** Styles applied to the collapse upon expanding */
    expandStyles?: Style;
    /** Styles applied to the collapse upon collapsing */
    collapseStyles?: Style;
    /** Timing function for the transition */
    easing?: string;
    /**
     * Duration of the expand/collapse animation.
     * If 'auto', the duration will be calculated based on the height of the collapse element
     */
    duration?: number | 'auto';
    /** If true, the animation will be disabled. Useful for disabling if the user prefers reduced motion */
    hasDisabledAnimation?: boolean;
    /** Unique ID used for accessibility */
    id?: string;
    /** Handler called when the expanded state changes */
    onExpandedChange?: (state: boolean) => void;
    /** Handler called when the collapse transition starts */
    onCollapseStart?: () => void;
    /** Handler called when the collapse transtion ends */
    onCollapseEnd?: () => void;
    /** Handler called when the expand transition starts */
    onExpandStart?: () => void;
    /** Handler called when the expand transition end */
    onExpandEnd?: () => void;
    /** Function that returns a reference to the element that expands and collapses */
    getCollapseElement: () => HTMLElement | null | undefined;
    /** Function that returns a reference to the toggle for the collapse region */
    getToggleElement?: () => HTMLElement | null | undefined;
}

interface UseCollapseParams extends Omit<CollapseParams, 'getToggleElement' | 'getCollapseElement'> {
    isExpanded?: boolean;
}
declare function useCollapse(options?: UseCollapseParams): {
    getCollapseProps({ refKey, ...rest }?: {
        [k: string]: unknown;
        refKey?: string | undefined;
    }): {
        [x: string]: ((node: any) => void) | null;
    } | {
        onTransitionEnd: react.TransitionEventHandler<Element>;
        id: string;
        'aria-hidden': boolean | undefined;
        style: {
            boxSizing: "border-box";
        };
        role: string;
        'aria-labelledby': string | undefined;
    };
    getToggleProps({ disabled, onClick, refKey, ...rest }?: {
        [k: string]: unknown;
        disabled?: boolean | undefined;
        onClick?: MouseEventHandler<any> | undefined;
        refKey?: string | undefined;
    }): {
        [x: string]: ((node: any) => void) | null;
    } | {
        onClick: (...args: any[]) => void;
        id: string;
        'aria-controls': string;
        'aria-expanded': boolean;
        disabled?: boolean | undefined;
        type?: "button" | undefined;
        'aria-disabled'?: boolean | undefined;
        role?: "button" | undefined;
        tabIndex?: 0 | -1 | undefined;
    };
    isExpanded: boolean;
    setExpanded: (update: boolean | ((value: boolean) => boolean)) => void;
};

export { useCollapse as default };
